// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: frontdeskpb/frontdesk.proto

package frontdeskpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FrontdeskService_CheckAvailability_FullMethodName = "/frontdeskpb.FrontdeskService/CheckAvailability"
)

// FrontdeskServiceClient is the client API for FrontdeskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrontdeskServiceClient interface {
	CheckAvailability(ctx context.Context, in *CheckAvailabilityRequest, opts ...grpc.CallOption) (*CheckAvailabilityResponse, error)
}

type frontdeskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontdeskServiceClient(cc grpc.ClientConnInterface) FrontdeskServiceClient {
	return &frontdeskServiceClient{cc}
}

func (c *frontdeskServiceClient) CheckAvailability(ctx context.Context, in *CheckAvailabilityRequest, opts ...grpc.CallOption) (*CheckAvailabilityResponse, error) {
	out := new(CheckAvailabilityResponse)
	err := c.cc.Invoke(ctx, FrontdeskService_CheckAvailability_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontdeskServiceServer is the server API for FrontdeskService service.
// All implementations must embed UnimplementedFrontdeskServiceServer
// for forward compatibility
type FrontdeskServiceServer interface {
	CheckAvailability(context.Context, *CheckAvailabilityRequest) (*CheckAvailabilityResponse, error)
	mustEmbedUnimplementedFrontdeskServiceServer()
}

// UnimplementedFrontdeskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFrontdeskServiceServer struct {
}

func (UnimplementedFrontdeskServiceServer) CheckAvailability(context.Context, *CheckAvailabilityRequest) (*CheckAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAvailability not implemented")
}
func (UnimplementedFrontdeskServiceServer) mustEmbedUnimplementedFrontdeskServiceServer() {}

// UnsafeFrontdeskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontdeskServiceServer will
// result in compilation errors.
type UnsafeFrontdeskServiceServer interface {
	mustEmbedUnimplementedFrontdeskServiceServer()
}

func RegisterFrontdeskServiceServer(s grpc.ServiceRegistrar, srv FrontdeskServiceServer) {
	s.RegisterService(&FrontdeskService_ServiceDesc, srv)
}

func _FrontdeskService_CheckAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontdeskServiceServer).CheckAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontdeskService_CheckAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontdeskServiceServer).CheckAvailability(ctx, req.(*CheckAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FrontdeskService_ServiceDesc is the grpc.ServiceDesc for FrontdeskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrontdeskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "frontdeskpb.FrontdeskService",
	HandlerType: (*FrontdeskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAvailability",
			Handler:    _FrontdeskService_CheckAvailability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontdeskpb/frontdesk.proto",
}
