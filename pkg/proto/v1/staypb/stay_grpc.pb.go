// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: staypb/stay.proto

package staypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StayService_ListStays_FullMethodName  = "/staypb.StayService/ListStays"
	StayService_CreateStay_FullMethodName = "/staypb.StayService/CreateStay"
	StayService_UpdateStay_FullMethodName = "/staypb.StayService/UpdateStay"
)

// StayServiceClient is the client API for StayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StayServiceClient interface {
	ListStays(ctx context.Context, in *ListStaysRequest, opts ...grpc.CallOption) (*ListStaysResponse, error)
	CreateStay(ctx context.Context, in *CreateStayRequest, opts ...grpc.CallOption) (*CreateStayResponse, error)
	UpdateStay(ctx context.Context, in *UpdateStayRequest, opts ...grpc.CallOption) (*UpdateStayResponse, error)
}

type stayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStayServiceClient(cc grpc.ClientConnInterface) StayServiceClient {
	return &stayServiceClient{cc}
}

func (c *stayServiceClient) ListStays(ctx context.Context, in *ListStaysRequest, opts ...grpc.CallOption) (*ListStaysResponse, error) {
	out := new(ListStaysResponse)
	err := c.cc.Invoke(ctx, StayService_ListStays_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stayServiceClient) CreateStay(ctx context.Context, in *CreateStayRequest, opts ...grpc.CallOption) (*CreateStayResponse, error) {
	out := new(CreateStayResponse)
	err := c.cc.Invoke(ctx, StayService_CreateStay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stayServiceClient) UpdateStay(ctx context.Context, in *UpdateStayRequest, opts ...grpc.CallOption) (*UpdateStayResponse, error) {
	out := new(UpdateStayResponse)
	err := c.cc.Invoke(ctx, StayService_UpdateStay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StayServiceServer is the server API for StayService service.
// All implementations must embed UnimplementedStayServiceServer
// for forward compatibility
type StayServiceServer interface {
	ListStays(context.Context, *ListStaysRequest) (*ListStaysResponse, error)
	CreateStay(context.Context, *CreateStayRequest) (*CreateStayResponse, error)
	UpdateStay(context.Context, *UpdateStayRequest) (*UpdateStayResponse, error)
	mustEmbedUnimplementedStayServiceServer()
}

// UnimplementedStayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStayServiceServer struct {
}

func (UnimplementedStayServiceServer) ListStays(context.Context, *ListStaysRequest) (*ListStaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStays not implemented")
}
func (UnimplementedStayServiceServer) CreateStay(context.Context, *CreateStayRequest) (*CreateStayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStay not implemented")
}
func (UnimplementedStayServiceServer) UpdateStay(context.Context, *UpdateStayRequest) (*UpdateStayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStay not implemented")
}
func (UnimplementedStayServiceServer) mustEmbedUnimplementedStayServiceServer() {}

// UnsafeStayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StayServiceServer will
// result in compilation errors.
type UnsafeStayServiceServer interface {
	mustEmbedUnimplementedStayServiceServer()
}

func RegisterStayServiceServer(s grpc.ServiceRegistrar, srv StayServiceServer) {
	s.RegisterService(&StayService_ServiceDesc, srv)
}

func _StayService_ListStays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StayServiceServer).ListStays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StayService_ListStays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StayServiceServer).ListStays(ctx, req.(*ListStaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StayService_CreateStay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StayServiceServer).CreateStay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StayService_CreateStay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StayServiceServer).CreateStay(ctx, req.(*CreateStayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StayService_UpdateStay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StayServiceServer).UpdateStay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StayService_UpdateStay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StayServiceServer).UpdateStay(ctx, req.(*UpdateStayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StayService_ServiceDesc is the grpc.ServiceDesc for StayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "staypb.StayService",
	HandlerType: (*StayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStays",
			Handler:    _StayService_ListStays_Handler,
		},
		{
			MethodName: "CreateStay",
			Handler:    _StayService_CreateStay_Handler,
		},
		{
			MethodName: "UpdateStay",
			Handler:    _StayService_UpdateStay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "staypb/stay.proto",
}
